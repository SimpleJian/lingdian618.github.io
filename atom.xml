<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Lijian's Site]]></title>
  <subtitle><![CDATA[Everything is possible if you have the real passion to what you do]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://lijian.ml/"/>
  <updated>2015-01-07T14:24:57.375Z</updated>
  <id>http://lijian.ml/</id>
  
  <author>
    <name><![CDATA[Lijian]]></name>
    <email><![CDATA[lijian430421@gmail.com]]></email>
  </author>
  
  <generator uri="http://zespia.tw/hexo/">Hexo</generator>
  
  <entry>
    <title><![CDATA[2014的点滴]]></title>
    <link href="http://lijian.ml/2015/01/07/2014%E7%9A%84%E7%82%B9%E6%BB%B4/"/>
    <id>http://lijian.ml/2015/01/07/2014的点滴/</id>
    <published>2015-01-07T14:24:52.000Z</published>
    <updated>2015-01-07T14:24:52.000Z</updated>
    <content type="html"><![CDATA[<p>2014是混乱的一年，在我要总结过去一年的生活时，竟不知从何下手，翻看手机里的照片和日记才使得过去一年的记忆逐渐鲜活起来。</p>
<h3 id="搬家">搬家</h3>
<p>7月中旬，研一新生开始陆续从怀柔校区搬回各自研究所。从怀柔搬回自动化所，可以算是今年乃至研究生阶段的分割线。这是一次搬家，更是一个阶段的结束、一种生活方式的转变。搬家之前，在怀柔的生活跟大学差不多，相对现在来说，可支配时间比较多，特别是夏季学期（搬家前的几周），课都上完了，每天就听听一些听不太懂的讲座，到了晚上，宿舍的同学都会一起去跑个步或者打打球，那段时光至今令人怀念。愉快的夏季学期结束后，也就意味着研一的生活结束了。搬到中关村这边的青年公寓后，大家做的第一件事便是吐槽宿舍环境。正所谓“由俭入奢易、由奢入俭难”，有点心理落差也是难免的，要怪只能怪怀柔校区的宿舍条件太好了。进实验室后，生活变成了另一种节奏，每天大部分时间都是坐在实验室，刚开始还真不习惯，特别是中午扛不住，趴着睡觉又特难受，后来每天中午都回宿舍休息，晚上还偶尔去打打乒乓球或是台球，经过调整后，慢慢地也就适应了。</p>
<h3 id="家庭变故">家庭变故</h3>
<p>4月底，舅舅意外去世。第一次听到这个消息是从姐姐那里，当时正在视频，姐姐突然语气沉重，“跟你说个事”，我意识到有点不对，然后就听到她说“舅舅去世了”，之后两边都沉默了。事后一周，妈妈才第一次跟我提起这事，通话中妈妈说着说着就泣不成声了，电话这头的我不知所措，语塞，心塞。暑假时跟妈妈回了趟外婆家，正值中元祭祖，送老客那一夜，第一次看到外公、外婆流泪，哭得撕心裂肺，妈妈几姊妹在一旁安慰，我带着小外甥女，尽量不让她捣乱，那揪心的场面一辈子难忘。</p>
<h3 id="游玩">游玩</h3>
<ul>
<li>班级组织活动，于是我跟着又爬了一次慕田峪，只是已没了第一次去的好奇与新鲜，上山时碰到一位老人牵着一头驴，爬得老快了，这是我第一次见到驴。</li>
<li>跟宿舍几个同学去爬了野长城，相比慕田峪，野长城虽不高，但更险。</li>
<li>清明节去了青龙峡，流程差不多就是买了门票进去爬了个山，本来有同学想去蹦极的，后因价格太贵就没蹦了。</li>
<li>暑假回长沙时，和姐夫去世界之窗玩了一圈，第3次体验过山车，接着被忽悠去玩云霄双塔，去了才发现云霄双塔又名“跳楼机”，最后只好硬着头皮上，闭着眼睛狠狠体验了一把“失重”与“超重”的感觉。之后姐夫还去蹦了个极，我确实不敢。之后的整个下午就泡在泳池了，学了一下午，还是没能浮起来，有点小遗憾+不甘……</li>
<li>国庆期间和APEC放假期间，和堂弟在北京各个景点走马观花一圈，圆明园、颐和园、地坛、天坛、八达岭长城、香山，给我留下最深刻印象的还是“人太多”。</li>
</ul>
<h3 id="本命年生日">本命年生日</h3>
<ul>
<li>过生日请几个同学去吃了一顿，他们给买了个蛋糕，有点小惊喜。回宿舍途中，在留学生宿舍门口碰到一个肯尼亚人，他要我教他几句简单的汉语，当时可能有点微醺，就去了他们宿舍，接着用蹩脚的口语+笔和纸跟他们聊了一个多小时。能碰到这种奇特的经历，当天运气真是不错，也算是一种缘分吧。</li>
<li>由于2014年闰九月，所以去年相当于过了两次生日。后来发现闰九月其实百年难遇，上一次闰九月要追溯到1832年，下一次还得等到2109年。所以这一次基本上是此生唯一。本来也没打算过，闰九月初一当天晚上姐姐给我打电话时才意识到，巧的是当天正好跟同学去买了辆山地车，也算是给自己买了个礼物吧。</li>
</ul>
<h3 id="反省">反省</h3>
<p>这一年的坏毛病，轻微强迫症+拖延症，很多事情都没有做到善始善终，比如刷题，USACO刷到只剩几题时就没管了，leetcode刷到只剩几题也没管了，最近一看，貌似又增加了很多新题；再比如说比赛，阿里巴巴的大数据竞赛做到后期时，给自己找了各种借口就懈怠了；再比如上公开课，一年来，真正上完的公开课貌似就只有Ng的机器学习。这么看来，我不是一个合格的强迫症患者，真正的强迫症应该是要么不做，要么用心做好。希望今年能改掉这些坏毛病。</p>
<h3 id="疑惑">疑惑</h3>
<p>To be or not to be a Phd? 这是个问题，毕业后去哪工作，留哪个城市，这又是一个问题，类似的疑惑还有很多。一直以来我都信奉“车到山前必有路，敲到船头自然直”，这样做表面上看起来很潇洒，其实不过是为“拖延症”找的借口罢了。所以这些疑惑还是早些想清楚比较好，免得事到临头被迫作出匆忙的决定。</p>
<h3 id="总结">总结</h3>
<p>我的2014，就如此文一样混乱，不过都过去了。2015来了，送自己一句话，改编自《一步之遥》的一句台词，“老老实实做人，认认真真做事”。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>2014是混乱的一年，在我要总结过去一年的生活时，竟不知从何下手，翻看手机里的照片和日记才使得过去一年的记忆逐渐鲜活起来。</p>
<h3 id="搬家">搬家</h3>
<p>7月中旬，研一新生开始陆续从怀柔校区搬回各自研究所。从怀柔搬回自动化所，可以算是今年乃至研究生阶]]>
    </summary>
    
      <category term="summary" scheme="http://lijian.ml/tags/summary/"/>
    
      <category term="生活点滴" scheme="http://lijian.ml/categories/%E7%94%9F%E6%B4%BB%E7%82%B9%E6%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[《浪潮之巅》读后感]]></title>
    <link href="http://lijian.ml/2014/12/20/%E3%80%8A%E6%B5%AA%E6%BD%AE%E4%B9%8B%E5%B7%85%E3%80%8B%E8%AF%BB%E5%90%8E%E6%84%9F/"/>
    <id>http://lijian.ml/2014/12/20/《浪潮之巅》读后感/</id>
    <published>2014-12-20T14:40:49.000Z</published>
    <updated>2014-12-20T14:40:49.000Z</updated>
    <content type="html"><![CDATA[<p>六度分隔理论不仅适应于人与人之间，我想在人与物之间应该也是存在的。我接触到《浪潮之巅》这本书过程就是这样：在上NLP课的时候随手搜了下统计语言模型，然后就找到了数学之美系列文章，接着就知道了吴军这么个人以及他的另外两本书《浪潮之巅》和《文明之光》。然后是吴军博士的一条微博激起了我对此书的兴趣，“我个人觉得《浪潮之巅》更好些，企业界的朋友也同意。但是似乎《数学之美》买的更好，一直不知道为什么。另外《文明之光》应该是三本中最好看的。”。于是乎从图书馆借来此书，每天睡觉前看上一段，到上周末的时候基本看完，只是拖到现在才动手写这篇总结。</p>
<p>读完《浪潮之巅》，最大的感受就是感觉自己是只井底之蛙，虽为工科研究生一枚，但却对科技产业、IT领域的历史和发展过程以及发展规律知之甚少，个人眼界太狭窄了。在《浪潮之巅》中，可以看到大量有趣的事实，举3个例子，第一个关于贝尔实验室的：得益于AT&amp;T从电信业获得的巨大垄断利润，贝尔实验室的人“无须为经费发愁”，由此吸引来大量优秀科学家，使得其不仅在通信领域长期执牛耳，而且在射电天文学、晶体管和半导体、计算机科学等领域领先与世界。其发明包括电话、射电天文望远镜、晶体管、数字交换机、Unix操作系统和C语言。此外，贝尔实验室还发现了电子的波动性，发明了信息论，组织发射了第一颗通信卫星，铺设了第一条商用光纤。真是吊炸天了，不愧是历史上最大的、最成功的私有实验室。但随着1996年AT&amp;T的分家，贝尔实验室也随之衰落了，自那以后再没搞出轰动世界的发明。第二个例子关于摩托罗拉的：在此之前，摩托罗拉在我的印象中就是做手机的，其他的没啥印象，我甚至都没有用过摩托罗拉的手机，我的第一部手机是诺基亚的（后来被偷了）。摩托罗拉公司原名高尔文制造公司（Galvin Manufacturer Corporation），最早是做汽车收音机的，Motorola是该收音机的品牌，Motor表示汽车，ola常用作商品名后缀（Coca Cola）。后来跟军方合作，研制便携式无线通信工具，作为军方和政府部门的供应商，其产品稳定性和鲁棒性都很好。关于这个，吴军博士还举了个很形象的例子，“我经常看到这类报到，在荒郊野外出了一起车祸，大家都拿出手机呼救，最后只有摩托罗拉的手机能打出去。”，由此可见其品质过硬。在20世界90年代初，Motorola在移动通信、数字信号处理和计算机处理器三个领域都是世界上技术最强的“选手”。但由于业务太多元化了，再加上管理混乱（上市大公司的通病），最终Motorola在CPU上败给了Intel，在手机上败给了Nokia，在DSP上败给了Texas Instruments，可以说是全线溃败。关于Motorola，还有一个必须提到的就是“铱星计划”。铱星系统是Motorola设计的全球卫星移动通信系统，该系统原先规划了77颗近地通信卫星，所以用原子序为77的铱来命名，虽然最后只用了66颗卫星，但由于66号元素“镝”在希腊文中意思是“难以获取”，所以最终保留了原来的名称。从技术上讲，“铱星移动通信系统是非常成功的，这是真正的科技精品”。但从商业角度看，铱星计划很失败，投入商业运行不到一年就被迫提成了破产保护。原因复杂，在此就不分析了。第三个例子是关于3M公司的，3M过去的全称为Minnesota Mining and Manufacturing Company，最初是一个采矿公司，后来转型为电子和日用品公司。下面来感受下这个公司的牛逼，“3M公司至今发明了6万中大大小小的产品，全世界有一半的人每天直接或间接地接触3M的产品。该公司营业额中有1/3来自与近五年的发明，其中相当大的一部分是员工利用工作时间从事非工作性质的研究搞出来的。3M允许员工用15%的时间干任何自己喜欢做的事，后来这个做法被Google学去了，变成了Google的‘20%项目’”，当初看到这一段时，简直不敢相信有这么个牛逼的存在，而且我从未听过。刚随手又百度了一下3M，主要是想看看我是不是无意中接触过3M的产品，其中提到了的非典期间的N95口罩还真让我想起了自己上次买的口罩上面有3M的字样，当时我还在想3M是个啥，莫非跟PM2.5有啥关系？现在算是恍然大悟了。</p>
<p>《浪潮之巅》不仅把我带到一个全局的高度，领略了各种科技公司的兴衰沉浮，还从行业发展规律的角度分析了其原因。对我来讲，印象最深刻的莫过于Andy-Bill’s law: What Andy gives, Bill takes away. 这其中的Andy指的是原Intel公司CEO Andy Grove，Bill指的就是盖茨，这个定律说的意思是，硬件更新换代带来的好处最终都会被越来越大的软件系统吃掉。本来，根据摩尔定律，硬件性能每18个月翻一番，这给所有的计算机消费者带来一个幻想，如果我今天嫌计算机太贵，那么我等18个月就可以用一半的价钱来买，我当初接触摩尔定律时也是这样想的，但要真是这样简单的话，Intel一类的硬件厂商就难以生存了。虽然CPU处理速度每18个月翻一番，硬盘和内存的容量以更快的速度在增长，但是微软的操作系统等应用软件越来越慢、越做越大，所以我们的计算机可能比10年前快了100倍，但从用户体验上丝毫察觉不到。10年前买的汽车在今天可以照常跑，10年前买的计算机却跑不动了。所以说安迪-比尔定律把原本属于耐用消费品的电脑、手机等商品变成了消耗性商品，刺激着整个IT领域的发展。在分析科技公司兴衰沉浮的原因时，吴军博士提出了基因决定定律：公司的发展很大程度上是由其“基因”决定的。初听起来有点宿命论的感觉，其实还是挺有道理的。一家公司的“基因”可以理解为公司的文化、宗旨、做事方式等。当一家公司进入成熟期后，它肯定被优化的非常适应当前市场，其成功的“秘诀”就会深深植入该公司，成为其“基因”。然而遗憾的是，适应现有市场的基因未必适合一个新的市场，这也是一家公司要转型为何如此之难。IBM成功的“秘诀”是和大客户签大合同，虽然当时它的IBM-PC卖得不错，但从骨子里看不上这类业务，所以不可能把PC事业上升到战略高度来考虑，这也导致其浪费了大好形势没能成为PC时代的领导者。Motorola是模拟手机市场的王者，在当时也看到了数字手机必将代替模拟手机的趋势，但它不愿过早放弃模拟手机，导致其在数字手机的研发上慢了半拍。另一方面，在模拟设备中，技术占至关重要的地位，然而数字设备中，各个厂家之间在技术上的差异很小，所以功能、可操作性、外观等非技术因素更重要，Motorola之前是做模拟手机的，在公司内部技术决定论一直占主导，所以在开发数字手机时，看不上诺基亚或三星等公司换一个机壳或颜色就算是一款新手机的做法，这也决定了其最终命运。</p>
<p>《浪潮之巅》是我从图书馆借来的为数不多的认真看完了的书之一（有木有很拗口），看完之后感觉挺有收获的，但又说不上来，或许是知识的增长，或许是眼界的拓宽，又或许是其它一些潜移默化的影响，管它呢，看书嘛，高兴就好。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>六度分隔理论不仅适应于人与人之间，我想在人与物之间应该也是存在的。我接触到《浪潮之巅》这本书过程就是这样：在上NLP课的时候随手搜了下统计语言模型，然后就找到了数学之美系列文章，接着就知道了吴军这么个人以及他的另外两本书《浪潮之巅》和《文明之光》。然后是吴军博士的一条微博激]]>
    </summary>
    
      <category term="读后感" scheme="http://lijian.ml/tags/%E8%AF%BB%E5%90%8E%E6%84%9F/"/>
    
      <category term="其他" scheme="http://lijian.ml/categories/%E5%85%B6%E4%BB%96/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[JPEG图片压缩神器]]></title>
    <link href="http://lijian.ml/2014/11/30/JPEG%E5%9B%BE%E7%89%87%E5%8E%8B%E7%BC%A9%E7%A5%9E%E5%99%A8/"/>
    <id>http://lijian.ml/2014/11/30/JPEG图片压缩神器/</id>
    <published>2014-11-30T04:07:38.000Z</published>
    <updated>2014-11-30T06:23:49.000Z</updated>
    <content type="html"><![CDATA[<p>昨天在微博上有人推荐<a href="https://tinyjpg.com/" target="_blank" rel="external">TinyJPG</a>，说是一款高保真JPEG图片压缩神器，我当时就试了2张图片，一张199.3k的压到104.2k，另一张3.6M的压到862.1k，关键是压缩后的图与压缩前的图片几乎肉眼无法分辨。</p>
<p><img src="http://public-lingdian618.qiniudn.com/images/IMG_1545.JPG" alt="压缩后"><br><img src="http://public-lingdian618.qiniudn.com/images/八达岭长城/IMG_1545.JPG" alt="压缩前"></p>
<p>于是乎，想着把博客Gallery页面中的图片都压缩下。<a href="https://tinyjpg.com/" target="_blank" rel="external">TinyJPG</a>提供了开发人员<a href="https://tinypng.com/developers" target="_blank" rel="external">API</a>，填写邮箱和姓名即可获取API key，免费用户每个月有500次压缩机会，对一般用户来说完全够用了。然后使用下面的语句提交图片进行压缩，完了会返回包含压缩后图片链接的结果。</p>
<p>提交图片进行压缩：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -i --user api:YOUR_API_KEY --data-binary @large.png https://api.tinypng.com/shrink</div></pre></td></tr></table></figure>

<p>返回结果示例：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">HTTP/<span class="number">1.1</span> <span class="number">100</span> Continue</div><div class="line"></div><div class="line">HTTP/<span class="number">1.1</span> <span class="number">201</span> Created</div><div class="line">Cache-Control: no-cache</div><div class="line">Content-Type: application/json; charset=utf-<span class="number">8</span></div><div class="line">Date: Sun, <span class="number">30</span> Nov <span class="number">2014</span> <span class="number">04</span>:<span class="number">05</span>:<span class="number">34</span> GMT</div><div class="line">Location: https://api.tinypng.com/output/t3ovb77ss91l4tl5.jpg</div><div class="line">Server: Apache/<span class="number">2</span></div><div class="line">Strict-Transport-Security: max-age=<span class="number">31536000</span></div><div class="line">X-Powered-By: Voormedia (voormedia.com/jobs)</div><div class="line">Content-Length: <span class="number">166</span></div><div class="line">Connection: keep-alive</div><div class="line"></div><div class="line">{<span class="string">"input"</span>:{<span class="string">"size"</span>:<span class="number">3624668</span>,<span class="string">"type"</span>:<span class="string">"image/jpeg"</span>},<span class="string">"output"</span>:{<span class="string">"size"</span>:<span class="number">862075</span>,<span class="string">"type"</span>:<span class="string">"image/jpeg"</span>,<span class="string">"ratio"</span>:<span class="number">0.2378</span>,<span class="string">"url"</span>:<span class="string">"https://api.tinypng.com/output/t3ovb77ss91l4tl5.jpg"</span>}}</div></pre></td></tr></table></figure>

<p>返回结果的末尾是一个JSON文件，其中包含了输入文件和输出文件的基本信息，压缩比，输出问题地址等。要实现批处理，关键在于从结果中提取输出文件的地址。于是搜了下如何用bash解析JSON，看到<a href="http://stackoverflow.com/questions/1955505/parsing-json-with-sed-and-awk" target="_blank" rel="external">stackoverflow</a>有人提到使用<a href="https://github.com/micha/jsawk" target="_blank" rel="external">jsawk</a>来做，但我在用的时候遇到一点小问题，可能跟系统环境有关。接着我发现返回结果的第6行中包含的Location字段其实就是输出文件的地址，使用awk可以很方便地得到这一行的信息。这样一来，批处理压缩图片也就很简单了，代码如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="shebang">#! /bin/bash</span></div><div class="line"><span class="comment"># 要压缩的图片目录，可包含多层子目录</span></div><div class="line">src=<span class="variable">$1</span></div><div class="line"><span class="comment"># 压缩图片存储目录</span></div><div class="line">dst=<span class="variable">$2</span></div><div class="line"><span class="comment"># 搜索JPG图片</span></div><div class="line"><span class="keyword">for</span> file <span class="keyword">in</span> `find <span class="variable">$src</span> -name <span class="string">'*.JPG'</span>`</div><div class="line"><span class="keyword">do</span></div><div class="line">  dir=`dirname <span class="variable">$file</span>`</div><div class="line">  mkdir -p <span class="variable">$dst</span>/<span class="variable">$dir</span></div><div class="line">  <span class="comment"># 提交单张图片进行压缩并下载压缩后的图片到本地</span></div><div class="line">  curl -i --user api:hQgNGMmE4ThuaPn8AJj8EyV0ePoj8Mp2 --data-binary @<span class="variable">$file</span> https://api.tinypng.com/shrink | awk <span class="string">'/Location/{print $2}'</span> | xargs -I <span class="string">'{}'</span> curl -L <span class="string">'{}'</span> &gt; <span class="variable">$dst</span>/<span class="variable">$dir</span>/`basename <span class="variable">$file</span>`</div><div class="line"><span class="keyword">done</span></div></pre></td></tr></table></figure>

]]></content>
    <summary type="html">
    <![CDATA[<p>昨天在微博上有人推荐<a href="https://tinyjpg.com/" target="_blank" rel="external">TinyJPG</a>，说是一款高保真JPEG图片压缩神器，我当时就试了2张图片，一张199.3k的压到104.2k，另一张3.6]]>
    </summary>
    
      <category term="TinyJPG" scheme="http://lijian.ml/tags/TinyJPG/"/>
    
      <category term="bash" scheme="http://lijian.ml/tags/bash/"/>
    
      <category term="其他" scheme="http://lijian.ml/categories/%E5%85%B6%E4%BB%96/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hexo博客访问速度优化]]></title>
    <link href="http://lijian.ml/2014/11/29/Hexo%E5%8D%9A%E5%AE%A2%E8%AE%BF%E9%97%AE%E9%80%9F%E5%BA%A6%E4%BC%98%E5%8C%96/"/>
    <id>http://lijian.ml/2014/11/29/Hexo博客访问速度优化/</id>
    <published>2014-11-29T06:42:39.000Z</published>
    <updated>2014-11-29T09:50:02.000Z</updated>
    <content type="html"><![CDATA[<h2 id="问题及排查">问题及排查</h2>
<p>这两天用手机访问本博客时发现慢得不行，一开始也不知道问题出在哪，瞎忙活了一阵，无果，最后只好静下心来慢慢排查问题。Hexo生成的是静态页面，而且我部署在gitcafe上，理应不慢，而且在电脑端访问速度确实也挺快的。于是，我首先怀疑是不是手机浏览器或者网速的问题，但用手机浏览器访问其他网站都挺快的，于是排除之。既然不是手机或网速的问题，那肯定就是站点本身的问题了。站点本身的问题可分为2类：域名解析的问题和页面加载的问题。然后我通过gitcafe提供的域名（lingdian618.gitcafe.io）访问发现还是一样慢，故排除之。其他能想到的原因都排除后，最终基本确定是页面加载环节出了问题。但网站页面都是Hexo生成了，理应不会出问题，用手机访问他人Hexo博客时也证明了这一点，接着我就想到是不是我自己添加的Gallery页面和About页面出了问题，于是将这2个页面去掉后再用手机访问，居然还是一样慢！这下子真不知道问题出在哪了。最后我甚至从头开始用Hexo建了一个博客，只是把原来的配置文件拿过来用，结果还是一样（此时我应当想到问题和配置文件有关）。就在我要放弃的时候，我发现了Google的<a href="https://developers.google.com/speed/pagespeed/insights/" target="_blank" rel="external">PageSpeed Insights</a>，它号称”使您的网页在所有设备上都能快速加载”，只要输入网页地址就能分析出网页中影响页面加载速度的元素，并提供相关建议。输入”lijian.ml”后分析的结果是”清除首屏内容中阻止呈现的 JavaScript 和 CSS”，一开始还不懂是啥意思，google之后才明白是脚本阻塞问题：页面中的脚本会阻塞其他资源的下载，如果将脚本放在头部，那么在脚本加载完成之前网页会是一片空白，因此推荐将所有脚本尽可能放到body标签的底部，以尽量减少对整个页面下载的影响。在我的网页中，引起阻塞的脚本是MathJax.js，这是渲染数学公式的脚本，由Hexo插件<a href="https://github.com/akfish/hexo-math" target="_blank" rel="external">Hexo-math</a>引入。</p>
<h2 id="解决问题">解决问题</h2>
<p>问题发现后，一下子没想到解决的方法，因为引起阻塞的脚本是Hexo-math这个插件弄进去的，而我对Hexo插件开发什么的一窍不通，所以也就放弃了亲自修改Hexo-math的念头，我给插件<a href="http://catx.me/" target="_blank" rel="external">作者</a>发邮件反馈了相关问题，期待<a href="http://catx.me/" target="_blank" rel="external">作者</a>尽快更新插件。但我的问题得马上解决，所以最后采用了简单粗暴的方法，用bash对所有public目录下包含MathJax.js的文件进行修改：把MathJax.js的包含语句移到body标签底部。具体代码如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="shebang">#! /bin/bash</span></div><div class="line"></div><div class="line"><span class="comment"># 页面中关于MathJax的脚本包含语句分成了2行，begin 和 end</span></div><div class="line">begin=<span class="string">'&lt;script type="text\/javascript" src="http:\/\/cdn.mathjax.org\/mathjax\/latest\/MathJax.js?config=TeX-AMS-MML_HTMLorMML"&gt;'</span></div><div class="line">end=<span class="string">'&lt;\/script&gt;'</span></div><div class="line"><span class="comment"># pos为参考行，最终将MathJax包含语句移动到pos的后面</span></div><div class="line">pos=<span class="string">'&lt;script src="\/js\/script.js" type="text\/javascript"&gt;&lt;\/script&gt;'</span></div><div class="line"></div><div class="line"><span class="comment"># 先删掉MathJax包含语句，然后在参考位置后面添加MathJax包含语句</span></div><div class="line">find ./public -name <span class="string">'index.html'</span> | xargs -I <span class="string">'{}'</span> \</div><div class="line">sed -i <span class="operator">-e</span> /<span class="string">"<span class="variable">$begin</span>"</span>/,/<span class="string">"<span class="variable">$end</span>"</span>/d <span class="operator">-e</span> <span class="string">"/^<span class="variable">$pos</span>/a<span class="variable">$begin</span><span class="variable">$end</span>"</span> <span class="string">'{}'</span></div></pre></td></tr></table></figure>

<p>每次运行 Hexo g 命令后都要运行上述bash以调整MathJax包含语句的位置，然后再deploy。</p>
<h2 id="其他优化">其他优化</h2>
<p>解决脚本阻塞问题后，手机访问明显快了不少。之后我又进行了一些其他的优化，比如把jQuery.min.js改成从本地包含，google的字体渲染干脆没用。这样下来速度已经很快了，<a href="https://developers.google.com/speed/pagespeed/insights/" target="_blank" rel="external">PageSpeed Insights</a>还提供了很多其他优化建议，由于太麻烦，暂且没弄了。</p>
<h2 id="小结">小结</h2>
<p>整个过程挺纠结的，但也学到了不少，再次感受到bash的强大。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="问题及排查">问题及排查</h2>
<p>这两天用手机访问本博客时发现慢得不行，一开始也不知道问题出在哪，瞎忙活了一阵，无果，最后只好静下心来慢慢排查问题。Hexo生成的是静态页面，而且我部署在gitcafe上，理应不慢，而且在电脑端访问速度确实也挺快的。于是，我]]>
    </summary>
    
      <category term="Hexo" scheme="http://lijian.ml/tags/Hexo/"/>
    
      <category term="bash" scheme="http://lijian.ml/tags/bash/"/>
    
      <category term="sed" scheme="http://lijian.ml/tags/sed/"/>
    
      <category term="其他" scheme="http://lijian.ml/categories/%E5%85%B6%E4%BB%96/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[给博客添加Gallery页面]]></title>
    <link href="http://lijian.ml/2014/11/26/%E7%BB%99%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0Gallery%E9%A1%B5%E9%9D%A2/"/>
    <id>http://lijian.ml/2014/11/26/给博客添加Gallery页面/</id>
    <published>2014-11-26T00:50:58.000Z</published>
    <updated>2014-11-26T13:06:40.000Z</updated>
    <content type="html"><![CDATA[<h1 id="引言">引言</h1>
<p>博客迁到Hexo后，试用了很多<a href="https://github.com/hexojs/hexo/wiki/Themes" target="_blank" rel="external">主题</a>，一开始感觉都还不错，比如之前用的<a href="http://yangjian.me/pacman/hello/introducing-pacman-theme/" target="_blank" rel="external">Pacman</a>就非常好，后来要在博客中发布照片时，就感觉有些地方不太合我口味。最初在发布照片时，我把同一主题的照片发布到同一篇博客，这样下来大概有10篇左右的照片博客，弄完之后发现把照片博客混在一般的文章中很不爽，一方面找起来不方便，另一方面首页看起来挺混乱的，于是就想着专门弄一个Gallery页面来放照片博客，试用了很多主题后都没找到解决方案，为此我还在hexo的github页面提了<a href="https://github.com/hexojs/hexo/issues/912#comments" target="_blank" rel="external">issues</a>，然后<a href="https://github.com/xing5" target="_blank" rel="external">xing5</a>给出了一种方案：把每篇照片博客都打上一个特殊的tag，然后在设置中把Gallery的链接设置为该tag的目录。这种方案确实可以简单有效地建立Gallery页面，但是首页和Archive页面还是会显示照片博客，所以我最终没采用此方案。后来纠结了很久也没找到比较合适的方案，就在我要妥协的时候，About页面给了我思路：Gallery页面其实也可以看成是About页面，只不过是About My Pictures，可以把所有的照片放在同一个页面中，同一个主题的照片可以分段隔开，放在同一个fancybox中，最终效果看<a href="http://lijian.ml/gallery/" target="_blank" rel="external">=&gt;这里&lt;=</a>。但由于要发布的照片有100+张，手工写图片链接想想都可怕，好在会点批处理，可以用bash快速生成Gallery页面的index.md文件。整个流程如下。</p>
<h2 id="生成新页面">生成新页面</h2>
<p>在博客目录下执行：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo new page <span class="string">'Gallery'</span></div></pre></td></tr></table></figure>

<h2 id="使用批处理生成Gallery页面的index文件">使用批处理生成Gallery页面的index文件</h2>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="shebang">#! /bin/bash</span></div><div class="line"></div><div class="line"><span class="comment"># 要发布的照片目录，目录中的每个子目录为同一个主题的照片，放在同一个fancybox中</span></div><div class="line">PHO_HOME=~/Pictures/public_photos/</div><div class="line"><span class="comment"># Gallery页面index文件</span></div><div class="line">dst_file=~/Documents/github/hexo/<span class="built_in">source</span>/gallery/index.md</div><div class="line"></div><div class="line"><span class="comment"># 七牛缩略图样式： 高度500px </span></div><div class="line">style_h500=<span class="string">'imageView2/2/h/500/q/85|watermark/2/text/bGlqaWFuLm1s/font/5a6L5L2T/fontsize/500/fill/I0VGRUZFRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10'</span></div><div class="line"><span class="comment"># 七牛缩略图样式： 高度100px</span></div><div class="line">style_h100=<span class="string">'imageView2/2/h/100/q/85'</span></div><div class="line"></div><div class="line"><span class="comment"># 七牛云中照片的前缀</span></div><div class="line">prefix=<span class="string">'http://public-lingdian618.qiniudn.com/images'</span></div><div class="line"></div><div class="line"><span class="comment"># 格式化输出头文件</span></div><div class="line"><span class="built_in">printf</span> <span class="string">"layout: gallery\ntitle: Gallery\ndate: 2014-11-23 09:08:08\n---\n\n"</span> &gt; <span class="variable">$dst_file</span></div><div class="line"></div><div class="line"><span class="comment"># 按最后touch时间遍历子目录</span></div><div class="line"><span class="keyword">for</span> x <span class="keyword">in</span> ` ls <span class="variable">$PHO_HOME</span> -t `;</div><div class="line"><span class="keyword">do</span></div><div class="line">	<span class="keyword">if</span> [ <span class="operator">-d</span> <span class="variable">$PHO_HOME</span>/<span class="variable">$x</span> ];</div><div class="line">	<span class="keyword">then</span></div><div class="line">		<span class="built_in">printf</span> <span class="string">"\n\n## %s\n\n"</span> <span class="variable">$x</span> &gt;&gt; <span class="variable">$dst_file</span></div><div class="line">		<span class="built_in">cd</span> <span class="variable">$PHO_HOME</span>/<span class="variable">$x</span></div><div class="line">		` ls | cat | xargs -I <span class="string">'{}'</span> <span class="built_in">printf</span> <span class="string">"&lt;a class=\"article-gallery-img fancybox\" href=\"%s/%s/%s?%s\" &gt;&lt;img src=\"%s/%s/%s?%s\" itemprop=\"image\"&gt;&lt;/a&gt;"</span> <span class="variable">$prefix</span> <span class="variable">$x</span> <span class="string">'{}'</span> <span class="variable">$style_h500</span> <span class="variable">$prefix</span> <span class="variable">$x</span> <span class="string">'{}'</span> <span class="variable">$style_h100</span> &gt;&gt; <span class="variable">$dst_file</span> `</div><div class="line">	<span class="keyword">fi</span></div><div class="line"><span class="keyword">done</span></div></pre></td></tr></table></figure>

<h2 id="去掉Gallery页面的Sidebar">去掉Gallery页面的Sidebar</h2>
<p>我的修改是基于默认主题landscape，通过 hexo new page产生的页面最终都会有Sidebar，看起来不爽，如果想去掉，可以通过修改landscape的layout.ejs文件实现。</p>
<p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">if(page.layout == 'about' || page.layout == 'gallery'){</div><div class="line">	<span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"outer"</span>&gt;</span><span class="tag">&lt;<span class="title">section</span>&gt;</span></div><div class="line">    	<span class="vbscript">&lt;%- body%&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="title">section</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></div><div class="line">}else...</div></pre></td></tr></table></figure><br>思路是这样的：对于不想要Sidebar的页面，在index.md文件中设定特殊的layout，例如我的Gallery页面index.md头文件如下：</p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">layout: gallery</div><div class="line">title: Gallery</div><div class="line">date: <span class="number">2014</span>-<span class="number">11</span>-<span class="number">23</span> <span class="number">09</span>:<span class="number">08</span>:<span class="number">08</span></div><div class="line">---</div></pre></td></tr></table></figure><br>然后在layout.ejs文件中根据page.layout来控制是否加载Sidebar模块。</p>
<h1 id="小结">小结</h1>
<p>通过这种方法添加Gallery页面简单粗暴，虽然有点麻烦，但在找到更好的方法之前只能这样了。这篇博客就当抛砖引玉，期待哪位仁兄能提出更好的解决方案。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="引言">引言</h1>
<p>博客迁到Hexo后，试用了很多<a href="https://github.com/hexojs/hexo/wiki/Themes" target="_blank" rel="external">主题</a>，一开始感觉都还不错，比]]>
    </summary>
    
      <category term="Hexo" scheme="http://lijian.ml/tags/Hexo/"/>
    
      <category term="其他" scheme="http://lijian.ml/categories/%E5%85%B6%E4%BB%96/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[手机照片整理]]></title>
    <link href="http://lijian.ml/2014/11/21/%E6%89%8B%E6%9C%BA%E7%85%A7%E7%89%87%E6%95%B4%E7%90%86/"/>
    <id>http://lijian.ml/2014/11/21/手机照片整理/</id>
    <published>2014-11-21T14:11:13.000Z</published>
    <updated>2014-11-21T14:11:13.000Z</updated>
    <content type="html"><![CDATA[<h2 id="问题由来">问题由来</h2>
<p>手机里的照片从没好好整理过，每次拍完照之后都很少再看，这样日积月累，手机空间都快不够了。正好最近在折腾hexo博客，于是有了把一些照片发布到博客的想法。要把照片发布到博客，就得考虑以下一些问题：</p>
<ul>
<li>分类问题，由于照片太多了，一张张去找要发布照片就太麻烦了。而且有些照片都忘了啥时候拍的，如果能对其进行分类，同时贴上时间标签，那就方便多了；</li>
<li>空间问题，照片总共好几个G，如何存储就是个问题，云存储是个不错选择。</li>
</ul>
<h2 id="方案及实现">方案及实现</h2>
<p>基本想法是这样的，首先把照片从手机中copy到电脑上，然后用脚本对照片按时间进行初步分类，将同一天拍摄的照片放到同一个文件夹中，一般来说，照片都是放假出去玩的时候拍的，同一主题的照片在时间上相对集中，按时间分类后找起来方便点。在发布照片到博客时，把要发布的照片上传到云存储空间，然后在博客中引用外链即可。</p>
<h3 id="照片分类">照片分类</h3>
<p>分类的标准有多个，按时间分类是最容易用脚本实现的，但最适合发布博客的应该是按主题分类，而按主题分类实在太麻烦（涉及图片高层语义），考虑到同一主题的照片在拍摄时间上一般是连续的，所以最终决定初步按时间分类，在发布时根据需要按时间查找相应照片。下面是按时间分类的脚本实现：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="shebang">#! /bin/bash</span></div><div class="line"><span class="comment"># 尚未分类的照片目录</span></div><div class="line">src_dir=<span class="variable">$1</span></div><div class="line"><span class="comment"># 分类照片存储目录</span></div><div class="line">dst_dir=<span class="variable">$2</span></div><div class="line"><span class="comment"># 遍历src_dir中的所有照片</span></div><div class="line"><span class="keyword">for</span> filename <span class="keyword">in</span> ` ls <span class="operator">-l</span> <span class="variable">$src_dir</span> | grep <span class="string">'^-'</span> | egrep -io <span class="string">'\w+\.(bmp|jpg|png|gif)$'</span> `</div><div class="line"><span class="keyword">do</span></div><div class="line">  <span class="comment"># 获取照片拍摄日期，根据日期在dst_dir中创建子目录，并将照片复制到相应目录</span></div><div class="line">  new_dir=` exiv2 <span class="variable">$src_dir</span>/<span class="variable">$filename</span> | egrep -o <span class="string">'[0-9]{4}:[0-9]{2}:[0-9]{2}'</span> | sed <span class="string">'s/:/-/g'</span> `</div><div class="line">  mkdir -p <span class="variable">$dst_dir</span>/<span class="variable">$new_dir</span></div><div class="line">  cp <span class="variable">$src_dir</span>/<span class="variable">$filename</span> <span class="variable">$dst_dir</span>/<span class="variable">$new_dir</span></div><div class="line"><span class="keyword">done</span></div></pre></td></tr></table></figure>

<h3 id="云存储空间">云存储空间</h3>
<p>存储空间我选择了七牛云存储，原因很简单：免费，简单易用。实名注册成为标准用户后就能免费获得10G的空间和10G/月的下载流量，这对一般用户来说完全够用了。注册成功后就可以新建空间，上传文件了，具体操作可以参考<a href="https://portal.qiniu.com/tutorial/index" target="_blank" rel="external">=&gt;这里&lt;=</a>。若需要上传的文件太多或者太大，可以考虑使用七牛提供的同步工具<a href="http://developer.qiniu.com/docs/v6/tools/qrsync.html" target="_blank" rel="external">qrsync</a>。在博客中要使用照片时，直接引用公开空间中文件的外链地址即可。如果说原图太大，七牛提供了一些数据处理的功能，通过新建图片样式就能获得原图的缩略图。最后贴一下我的<a href="https://portal.qiniu.com/signup?code=3lffq2l27ktoy" target="_blank" rel="external">邀请链接</a>。</p>
<h2 id="其他">其他</h2>
<p>在上传照片到云空间，以及发布照片到博客的过程中，要时刻有保护个人隐私的意识（特别是批量上传时），要是一不小心把一些不该上传的东西上传到了公开空间甚至发布到博客，那就一世清名毁于一旦了……</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="问题由来">问题由来</h2>
<p>手机里的照片从没好好整理过，每次拍完照之后都很少再看，这样日积月累，手机空间都快不够了。正好最近在折腾hexo博客，于是有了把一些照片发布到博客的想法。要把照片发布到博客，就得考虑以下一些问题：</p>
<ul>
<li>分类]]>
    </summary>
    
      <category term="bash" scheme="http://lijian.ml/tags/bash/"/>
    
      <category term="qiniu" scheme="http://lijian.ml/tags/qiniu/"/>
    
      <category term="其他" scheme="http://lijian.ml/categories/%E5%85%B6%E4%BB%96/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[SVM数学推导]]></title>
    <link href="http://lijian.ml/2014/07/12/SVM-model/"/>
    <id>http://lijian.ml/2014/07/12/SVM-model/</id>
    <published>2014-07-11T16:00:00.000Z</published>
    <updated>2014-11-29T09:43:27.000Z</updated>
    <content type="html"><![CDATA[<h2 id="最优间隔分类器">最优间隔分类器</h2>
<p>针对模式分类问题，通过特征提取后，就能得到特征向量及对应的类别标签：</p>
<span>$$( {\vec x}_i, y_i ), \quad i=1,2,3 \cdots m$$</span>

<p>其中，<span>${\vec x}_i$</span>表示第i个样本的特征向量，<span>$y_i$</span> 表示第i个样本所属类别。</p>
<p>对于二分类问题，设线性分类器的判别函数为 <span>$d({\vec x})={\vec w} \cdot {\vec x}+b$</span> ，对于一个待分类样本，通过特征提取得到其特征向量，将特征向量代入分类器判别函数，若输出为正，则将样本判定为+1类，否则为-1类。从几何的观点来看，特征提取是将样本抽象为欧氏空间中的一个点，而判别函数是该空间中的一个超平面，超平面不同侧的点对应不同类别的样本。因此，如果样本线性可分的话，那么就存在无穷多个超平面将其分开，也即存在无穷多个线性分类器能将样本分开，既然是这样，那么哪一个最好呢？直观上看，应该使分类超平面离样本点越远越好，这样可以减小把新样本分错的概率。当然，此处的“越远越好”的前提是要正确分类。分类器的间隔定义为所有样本点到分类超平面的距离中的最小值。最优间隔分类器就是间隔最大的分类器。</p>
<p>样本点<span>${\vec x}_i$</span>到超平面的距离为：</p>
<span>$$\frac{|\vec w \cdot {\vec x}_i + b|}{\Vert \vec w \Vert}$$</span>

<p>最优间隔分类器的优化目标为：</p>
<span>$$\mathop{max}_{\vec w, b} \{ \mathop{min}_i \{ \frac{|\vec w \cdot {\vec x}_i + b|}{\Vert \vec w \Vert} \} \}$$</span>

<p>要直接求解上述优化问题显然不易，然而，幸运的是可以将其转化为一个凸优化问题。</p>
<h2 id="转化为带约束的凸优化问题">转化为带约束的凸优化问题</h2>
<p>上一节将最优间隔分类器的求解转化为一个数学优化问题，我们最终的目标是求得<span>$\vec w$</span>和<span>$b$</span>，如果<span>$\vec w^*$</span>和<span>$b^*$</span>是最优间隔分类器的参数，那么<span>$k\cdot {\vec w}^*$</span>和<span>$k\cdot b^*$</span>其实对应同一个分类器(超平面)。由此可以得出，在问题可分的情况下，一定存在<span>$\vec w$</span>和<span>$b$</span>满足<span>$|\vec w \cdot {\vec x}_i + b| \geq 1$</span>，同时又是最优间隔分类器的参数。因此可以考虑把这个约束加到上一节的优化问题中，关键在于，加入此约束后，求得的最优解与原问题等价，同时可以将原问题简化。下面看看如何简化：</p>
<span>$$\begin{eqnarray}
&& \mathop{max}_{\vec w, b} \{ \mathop{min}_i \{ \frac{|\vec w \cdot {\vec x}_i + b|}{\Vert \vec w \Vert} \} \} , & s.t. \quad  |\vec w \cdot {\vec x}_i + b| \geq 1 \\
& \Leftrightarrow 
& \mathop{max}_{\vec w, b} \{ \frac{1}{\Vert \vec w \Vert} \} , & s.t. \quad  |\vec w \cdot {\vec x}_i + b| \geq 1 \\
& \Leftrightarrow 
& \mathop{min}_{\vec w, b}  {\Vert \vec w \Vert} , & s.t. \quad  |\vec w \cdot {\vec x}_i + b| \geq 1 \\
& \Leftrightarrow 
& \mathop{min}_{\vec w, b}  \frac{1}{2}{\Vert \vec w \Vert}^2  , & s.t. \quad  |\vec w \cdot {\vec x}_i + b| \geq 1 \\
& \Leftrightarrow 
& \mathop{min}_{\vec w, b}  \frac{1}{2}{\Vert \vec w \Vert}^2  , & s.t. \quad  (\vec w \cdot {\vec x}_i + b)\cdot y_i \geq 1 
\end{eqnarray}$$</span>

<p>最终，我们将上一节复杂的优化问题转化成了一个带约束的凸优化问题，但仍然不好求解，所以还得转化。</p>
<h2 id="转化为对偶问题">转化为对偶问题</h2>
<p>为了得到对偶问题，先构造罚函数<span>$L(\vec w, b, \vec \alpha)$</span>，然后分析<span>$\mathop{max}_{\vec w, b} \{ \mathop{min}_{\vec \alpha} L(\vec w, b, \vec \alpha) \}$</span>与上一节的带约束凸优化问题等价，接着根据对偶原理将max min问题转化为min max问题：<span>$\mathop{min}_{\vec \alpha} \{ \mathop{max}_{\vec w, b} L(\vec w, b, \vec \alpha) \}$</span>。</p>
<h3 id="罚函数的构造">罚函数的构造</h3>
<p>罚函数的思想是把约束条件吸收到目标函数里面，通过增加目标函数的参数来减少约束条件，同时为了保证罚函数与原优化问题等价，往往需要引入新的约束，但新的约束条件通常较简单。在此引入的罚函数为：</p>
<span>$$\begin{align}
& L(\vec w, b, \vec \alpha)=\frac{1}{2}{\Vert \vec w \Vert}^2 - \sum_{i} \alpha_i [(\vec w \cdot {\vec x}_i + b)\cdot y_i - 1 ] \\
& s.t. \quad \alpha_i \geq 0 
\end{align}$$</span>

<h3 id="等价性分析">等价性分析</h3>
<p>现在来分析<span>$\mathop{min}_{\vec w, b} \{ \mathop{max}_{\vec \alpha} L(\vec w, b, \vec \alpha) \}$</span>与上一节的带约束凸优化问题等价。为了便于分析min max函数的值，先把参数空间划分为2个子集合，不妨叫集合A和集合B，集合A中的参数满足<span>$(\vec w \cdot {\vec x}_i)\cdot y_i - 1 \geq 0$</span>，B为A的补集，然后进行如下推导：</p>
<span>$$\begin{eqnarray}
&& \mathop{min}_{\vec w, b} \{ \mathop{max}_{\vec \alpha \geq 0 } L(\vec w, b, \vec \alpha) \} \\
&=& \mathop{min}_{\vec w, b} \{ \mathop{max}_{\vec \alpha \geq 0, (\vec w, b)\in A } L(\vec w, b, \vec \alpha), \mathop{max}_{\vec \alpha \geq 0 , (\vec w, b)\in B } L(\vec w, b, \vec \alpha) \}  \\
&=& \mathop{min}_{\vec w, b} \{ { \frac{1}{2}{\Vert \vec w \Vert}^2 }_{ (\vec w, b)\in A }, { \frac{1}{2}{\Vert \vec w \Vert}^2 }_{ (\vec w, b)\in B } + \infty \}  \\
&=& \mathop{min}_{\vec w, b}_{ (\vec w, b)\in A }  \frac{1}{2}{\Vert \vec w \Vert}^2  
\end{eqnarray}$$</span>

<p>推导结果表面min max函数与上一节中带约束的凸优化问题是等价的。</p>
<h3 id="将min_max函数转为max_min函数">将min max函数转为max min函数</h3>
<p>貌似在满足一定的条件下，min max函数和max min函数在相同点取得最优解，也即：</p>
<span>$$\begin{eqnarray}
&& \mathop{min}_{\vec w, b} \{ \mathop{max}_{\vec \alpha} L(\vec w, b, \vec \alpha) \} \\
&=& \mathop{max}_{\vec \alpha} \{ \mathop{min}_{\vec w, b} L(\vec w, b, \vec \alpha) \} 
\end{eqnarray}$$</span>

<h2 id="求解对偶问题">求解对偶问题</h2>
<p>先对内层min函数求一阶必要性条件：</p>
<p><span>$$\begin{align}
& \frac{\partial L }{\vec w} = \vec w - \sum_{i} \alpha_i y_i {\vec x}_i = 0 \\
& \frac{\partial L }{b} = \sum_{i} \alpha_i y_i = 0 
\end{align}$$</span><br>可得<span>$\vec w = \sum_{i} \alpha_i y_i {\vec x}_i$</span>，代入对偶问题中可得：</p>
<p><span>$$\begin{align}
& \mathop{max}_{\vec \alpha} \{ \mathop{min}_{\vec w, b} L(\vec w, b, \vec \alpha) \} 
= \mathop{max}_{\vec \alpha} \{ \sum_{i} \alpha_i - \sum_{i,j} \alpha_i \alpha_j y_i y_j {\vec x}_i {\vec x}_j \} \\
& s.t. \quad \sum_{i} \alpha_i y_i = 0 
\end{align}$$</span><br>转化成上述形式后可通过SMO算法快速求得最优解。关于SMO算法，打算单独写一篇。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="最优间隔分类器">最优间隔分类器</h2>
<p>针对模式分类问题，通过特征提取后，就能得到特征向量及对应的类别标签：</p>
<span>$$( {\vec x}_i, y_i ), \quad i=1,2,3 \cdots m$$</span>

<p>其中，]]>
    </summary>
    
      <category term="SVM" scheme="http://lijian.ml/tags/SVM/"/>
    
      <category term="学习笔记" scheme="http://lijian.ml/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[对KKT条件的理解]]></title>
    <link href="http://lijian.ml/2014/07/05/kkt/"/>
    <id>http://lijian.ml/2014/07/05/kkt/</id>
    <published>2014-07-04T16:00:00.000Z</published>
    <updated>2014-11-22T12:31:45.000Z</updated>
    <content type="html"><![CDATA[<h2 id="带约束的数值优化问题">带约束的数值优化问题</h2>
<p>数值优化问题是在有限维实空间上求单值函数的极值。函数的自变量可能受限制于有限个等式或不等式约束。数值优化问题通常可以写成如下形式：</p>
<span>$$min f(\vec{x}) \\
s.t. \quad g_i(\vec{x})\geq0, h_j(\vec{x})=0$$</span>

<p>其中，<span>$f(\vec{x})$</span>是优化目标，<span>$\vec{x}$</span>是变量，<span>$g(\vec{x})$</span>是不等式约束，<span>$h(\vec{x})$</span>是等式约束，通常来说，所有的优化问题都可以转化为以上形式。</p>
<h2 id="无约束优化问题的一阶必要性条件">无约束优化问题的一阶必要性条件</h2>
<span>$$\nabla f(\vec{x})=0$$</span>


<h2 id="只含等式约束的一阶必要性条件—lagrangian_methond">只含等式约束的一阶必要性条件—lagrangian methond</h2>
<span>$$\nabla f(\vec{x}) = \sum\lambda_i\nabla h_i(\vec{x})$$</span>

<h2 id="一般优化问题的一阶必要性条件—KKT_condition">一般优化问题的一阶必要性条件—KKT condition</h2>
<span>$$\nabla f(\vec{x}) = \sum\lambda_i\nabla h_i(\vec{x}) + \sum_{\mu_j \geq 0}\mu_j\nabla g_j(\vec{x}) \\
\mu_j g_j(\vec{x}) = 0，\quad \forall j$$</span>


<p>无论优化问题是否有约束，一阶必要性条件在本质上是一样的，如果某点是极值点，那么在该点处一定不存在一个可行的下降（上升）方向使函数值减小（增大），这就是极值点的一阶必要性条件，以下2种情况可以满足该条件：</p>
<ul>
<li>函数在该点的梯度为0，典型的例子是无约束优化问题的一阶必要性条件；</li>
<li>函数在该点的梯度不为0，但由于约束条件的存在，无法沿梯度方向移动来使函数值发生变化。</li>
</ul>
<p>先考虑只有一个等式约束的情况，此时自变量的可行域是一个约束面，假设<span>$\vec{x}$</span>最初位于<span>$\vec{x_0}$</span>处，那么此时<span>$\vec{x}$</span>的移动方向肯定不能与约束面的法向量方向平行，也不能包含法向量方向的分量，否则沿该方向移动将使得<span>$\vec{x}$</span>跳出约束面。所以，当目标函数的梯度方向与约束面在该点的法向量方向平行时，就找不到一个可行的合法的下降方向了（沿梯度方向移动才能下降）。用数学公式表达出来就是<span>$\nabla f(\vec{x}) = \lambda \nabla h(\vec{x})$</span>，这正是只含一个等式约束条件的一阶必要性条件。</p>
<p>再考虑有多个等式约束的情况，此时自变量可行域为多个约束面的交集，如果目标函数的梯度恰好可以分解为约束面的法向量线性组合，那么，沿目标函数梯度方向的移动将会违背约束条件，所以，含多个等式约束的优化问题的一阶必要性条件为：<span>$\nabla f(\vec{x}) = \sum \lambda_i \nabla h_i(\vec{x})$</span></p>
<p>最后考虑含不等式约束的情况，此时的可行域是由等式约束决定的约束面以及由不等式约束决定的区域的交集。要判定 <span>$\vec{x}$</span>是否是极值点，可分以下2种情况考虑：</p>
<ol>
<li><span>$\vec{x}$</span>位于区域边界上，此时不等式约束的等号恰好成立，此时的情况可以与等式约束类比，只不过在分解梯度的时候，限定了法向量的方向；</li>
<li><span>$\vec{x}$</span>位于区域内部，此时的不等式约束对可行方向不具约束力，在分解梯度时无需考虑，因此对应的<span>$\mu_j=0$</span>，这也解释了为什么要满足互补条件。</li>
</ol>
<p>总结，优化问题的一阶必要性条件的实质是考察梯度条件，这也是为什么叫“一阶”必要性条件的原因。对于带约束的优化问题，只要将约束条件转化为对可行方向的约束，就能够比较直观地理解一阶必要性条件。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="带约束的数值优化问题">带约束的数值优化问题</h2>
<p>数值优化问题是在有限维实空间上求单值函数的极值。函数的自变量可能受限制于有限个等式或不等式约束。数值优化问题通常可以写成如下形式：</p>
<span>$$min f(\vec{x}) \\
s.t. ]]>
    </summary>
    
      <category term="math" scheme="http://lijian.ml/tags/math/"/>
    
      <category term="optimization" scheme="http://lijian.ml/tags/optimization/"/>
    
      <category term="KKT" scheme="http://lijian.ml/tags/KKT/"/>
    
      <category term="学习笔记" scheme="http://lijian.ml/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[聚类中的关键问题--于剑老师讲座报告]]></title>
    <link href="http://lijian.ml/2014/06/18/cluster/"/>
    <id>http://lijian.ml/2014/06/18/cluster/</id>
    <published>2014-06-17T16:00:00.000Z</published>
    <updated>2014-11-22T12:58:00.000Z</updated>
    <content type="html"><![CDATA[<p>今天下午听了于剑老师关于聚类的讲座，下面简单总结下。</p>
<h2 id="什么是聚类">什么是聚类</h2>
<p>物以类聚，人以群分。这句话比喻同类的东西常聚在一起，志同道合的人相聚成群。关于这个成语还有一个有趣的典故，有兴趣的可以看看<a href="http://baike.baidu.com/view/412596.htm" target="_blank" rel="external">这里</a>。“聚类”这个词应该是取自这个成语，在台湾，“聚类”也叫“分群”。现在的问题是，给你一堆人或者一堆东西，要你把相似的分到同一组，不相似的分到不同的组，这个过程就是聚类。与聚类非常相似的一个概念是分类，一般来说，聚类属于无监督学习，分类属于有监督学习，二者的区别在于是否事先知道类别信息，举个例子，假设对一群人分组，如果事先告诉你要分成2组，一组男的，一组女的，那么这个问题就是分类问题，如果没有相关信息，只要你把这群人分成若干个组就行，那么这个问题就是聚类问题。</p>
<h2 id="为何要聚类">为何要聚类</h2>
<p>聚类能干什么呢？下面是于剑老师ppt上列出来的几点：</p>
<ul>
<li>When studying complex network, people hopes to find the community<br>with intrinsic relations（发现复杂网络中的社群结构）</li>
<li>In image analysis,people hopes to segment an image into<br>homogeneous regions（将图像分割成同质区域）</li>
<li>In text processing, people hopes to find document subsets with the<br>same topic（发现相同主题的文档）</li>
<li>In lossy coding,people hopes to find an code with minimum<br>information loss（在有损编码中，寻找信息丢失最少的编码方式）</li>
<li>In customer behavior analysis, people hopes to find homogeneous<br>customer groups in order to efficiently make an advertisement（对用户分层，从而更有效地打广告）</li>
</ul>
<h2 id="聚类分析的一般流程">聚类分析的一般流程</h2>
<ul>
<li>数据表示和数据预处理，包括数据清洗、特征提取、特征选择</li>
<li>定义相似性，把对象之间的相似性用提取的特征体现出来</li>
<li>聚类，选择某种聚类算法对数据进行划分</li>
<li>性能评估，对聚类结果的好坏进行评价</li>
</ul>
<h2 id="聚类中的关键问题">聚类中的关键问题</h2>
<ul>
<li>相似性的定义。上个世纪60年代，模式识别研究的鼻祖之一，美籍日本学者渡边慧证明了<a href="http://baike.baidu.com/view/815246.htm" target="_blank" rel="external">“丑小鸭定理”</a>。这个定理说的是“丑小鸭与白天鹅之间的区别和两只白天鹅之间的区别一样大”。丑小鸭是白天鹅的幼雏，在画家的眼里，丑小鸭和白天鹅的区别大于两只白天鹅的区别；但是在遗传学家的眼里，丑小鸭与其父亲或母亲的差别小于父母之间的差别。由此引出的一个问题是，事物有没有“本质”？一个苹果，牛顿看到的是它的质量，遗传学家看到的是它的染色体中的DNA序列，美食家关心的是它的味道，画家看到的是它的颜色和形状，孔融还可能关注其大小并从中看出道德因素。这里面没有谁对谁错的问题，所以不可能知道苹果的“本质”是什么。在说到“本质”的时候，充其量说的只是“我认为最重要的特征”，只代表个人的立场，他人并没有赞同的充分理由。所以任何使用“本质”这个词汇所进行的论证都是靠不住的。如果一个哲学家说：“思维是人的本质，计算机不具备这种本质，所以机器不能思维。”这种论证只相当于说：“我认为计算机不能思维，所以计算机不能思维。”这当然不能成为有效的论证。问题就在于世界上还不存在能够判断什么是事物的本质的公认的有效方法。所以没法判断事物之间本质上是否相似，一切相似性定义都是主观的，都是面向具体问题的。</li>
<li>聚类算法的设计。就目前而言，貌似没有什么放之四海皆准的聚类算法，大多数算法都得对数据的分布形式作出一定的假设。在设计聚类算法时，还存在另一个问题，数据在原空间的聚集形态可能跟实际不一致，可能需要将数据转换到另一个空间中，这个问题可以看成是特征处理的问题，也可以在设计聚类算法时考虑。听于老师说，现在很多人做聚类时把特征处理和聚类算法设计合成一个步骤，这样一来可以使特征与算法匹配得更好，从而得到更好的聚类效果。</li>
<li>聚类结果的评估。要对一个聚类结果进行评估，就得有一个所谓的“参考答案”，但是，如果我们已经知道来聚类结果，那么也就没必要再做聚类来，这一矛盾给聚类结果的评估带来不少麻烦。</li>
<li>如何建立聚类分析的公理化系统。这一问题貌似在机器学习中普遍存在，在机器学习中，我们做的很多事情都是基于“经验主义”，而非“理性主义”。要是在机器学习领域能够建立像牛顿力学中那样优美的三大定律公理化系统，那聚类分析的公理化系统应该也不是问题来。</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>今天下午听了于剑老师关于聚类的讲座，下面简单总结下。</p>
<h2 id="什么是聚类">什么是聚类</h2>
<p>物以类聚，人以群分。这句话比喻同类的东西常聚在一起，志同道合的人相聚成群。关于这个成语还有一个有趣的典故，有兴趣的可以看看<a href="http://]]>
    </summary>
    
      <category term="clustering" scheme="http://lijian.ml/tags/clustering/"/>
    
      <category term="summary" scheme="http://lijian.ml/tags/summary/"/>
    
      <category term="学习笔记" scheme="http://lijian.ml/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[近期总结]]></title>
    <link href="http://lijian.ml/2014/06/16/summary/"/>
    <id>http://lijian.ml/2014/06/16/summary/</id>
    <published>2014-06-15T16:00:00.000Z</published>
    <updated>2014-11-07T03:32:49.000Z</updated>
    <content type="html"><![CDATA[<p>话说自去年入学以来，印象中北京没下过几次雨，但这两天的暴雨提醒了我“北京看海”不是神话。经过昨晚一夜大雨，校园中那条小河水位暴涨，由于小河刚挖成不久，被暴雨这么一冲，“枯水渠”一夜之间变成了“小黄河”。窗外的青蛙在大雨过后也变得异常兴奋，呱呱叫个不停。此刻的我，正坐在宿舍，听着蛙声，准备总结下过去几周的生活。</p>
<p>过去几周，可以说是研究生入学以来最忙碌的一段时间。把时间调回到一个月前，那时的我正忙于参加阿里巴巴的大数据竞赛。在5月初到5月中旬的那2周时间里，每天除了吃饭，睡觉，上课之外，就是做比赛。那段时间确实搞得比较凶，有时甚至不惜破戒12点后才睡觉，即使是这样，早上还经常7点不到就醒了，醒来的第一件事就是，抓过手机看排行榜。照这样的节奏过了大概有2周，然后有一天，上课的时候老师提到大作业的事情，我才意识到一大波考试和大作业即将来袭，而我还一点儿没准备。当时我就有了紧迫感，4门考试，4门大作业，而且时间都集中在5月底到6月初，也就是说3周时间要搞定4门考试和4门大作业，现在想想都有些后怕。由于时间紧迫，所以当天就决定暂时停止比赛，集中精力准备大作业和考试。在接下来的3周时间里，先后搞定了图像检索系统，深圳出租车GPS数据可视化系统以及中文文本自动分类系统3个大作业，其中可视化的那个大作业是组队完成的，队友相当给力。另外，值得庆幸的是，大数据的大作业被老师推迟到了6月底，而且队友说可以直接把他上的“高性能”那门课程的大作业移植过来，所以这也给了我不少喘息之机，否则真忙不过来。</p>
<p>现在该忙的也基本忙完了，比赛也歇了一个多月，今天看了下阿里竞赛的排行榜，都快要掉出前100了，有点跟不上节奏了。不管怎么样，就当做着玩呗。给自己加油！</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>话说自去年入学以来，印象中北京没下过几次雨，但这两天的暴雨提醒了我“北京看海”不是神话。经过昨晚一夜大雨，校园中那条小河水位暴涨，由于小河刚挖成不久，被暴雨这么一冲，“枯水渠”一夜之间变成了“小黄河”。窗外的青蛙在大雨过后也变得异常兴奋，呱呱叫个不停。此刻的我，正坐在宿舍，]]>
    </summary>
    
      <category term="summary" scheme="http://lijian.ml/tags/summary/"/>
    
      <category term="生活点滴" scheme="http://lijian.ml/categories/%E7%94%9F%E6%B4%BB%E7%82%B9%E6%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[一个有意思的概率问题]]></title>
    <link href="http://lijian.ml/2014/01/15/an_probability_problem/"/>
    <id>http://lijian.ml/2014/01/15/an_probability_problem/</id>
    <published>2014-01-14T16:00:00.000Z</published>
    <updated>2014-11-05T13:59:21.000Z</updated>
    <content type="html"><![CDATA[<h2 id="引入问题">引入问题</h2>
<p>在书上看到一个有意思的问题，不知从何说起，举个栗子，话说临近期末，小明闲来无事，想起了炒股，但他对股市知之甚少，于是他打算请个专家来指导他，为了确保专家质量，他决定对50个“专家”进行考核，选取表现最好的，考核方式如下：让专家们在接下来的连续10天内对某只特定股的涨跌进行独立预测（只预测“涨”或“跌”），10天过后，如果表现最好的专家正确率高于80%，那么就选他，否则说明这批专家太水了，弃之不用。现在的问题是，小明精心选拔出来的表现最好的专家是否可靠？</p>
<h2 id="初步分析">初步分析</h2>
<p>初看起来小明的选拔方案貌似很合理：</p>
<ul>
<li>首先，不盲从专家，即使是专家也得考核；</li>
<li>其次，考核比较严格，连续10天预测，正确率高达80%才有机会，一般人恐怕难以做到；</li>
<li>再者，人数众多，滥竽充数者难以胜出。</li>
</ul>
<h2 id="结论">结论</h2>
<p>但事实总是残酷的：通过以上方式选出的专家那是相当的不靠谱！具体分析如下：由于每次预测结果只有2种，所以对一个普通人而已，可以合理假设他在一次预测中正确的概率是0.5，对于连续10次预测，要达到80%以上的正确率，概率为：</p>
<p><span>$$P_0=\sum_{i=8}^{i=10}C_{10}^{i}0.5^i\cdot(1-0.5)^{(10-i)}=(36+10+1)\cdot0.5^{10}=47\cdot0.5^{10}\approx0.0459$$</span><br>可以说是相当低，但是，50个普通人中正确率最高的要达到80%以上的正确率，概率为：</p>
<p><span>$$P_1=1-(1-P_0)^{50}\approx0.9046$$</span><br>概率高达90%，也就是说，小明就是找来50个白痴，也很能有人正确率高于80%。看似合理的方案其实一点都不靠谱。</p>
<h2 id="原因分析">原因分析</h2>
<p>问题到底出在哪呢？说好的专家呢？我们之前分析方案合理性的时候提到过“人数众多”，其实问题恰恰出在人太多了。上面的选拔方案其实等价于让一个人面试50次，如果表现最好的那一次正确率超过80%就录用。这样看来，这方案确实不靠谱。</p>
<h2 id="应用">应用</h2>
<p>这个例子可能有点极端，但却很好地体现了群体的智慧，阐释了团结就是力量。生活中还有很多类似的问题可以用上述分析过程来解释，比如说：</p>
<ul>
<li>三个臭皮匠赛过诸葛亮；</li>
<li>机器学习中的bagging方法，训练多个弱分类器，最后投票决定分类结果；</li>
<li>找工作时使用海投战术，只要自己表现最好的那次面试通过就OK了，但其实由于人的精力有限，所以海投会使得每次面试都准备不充分，难以达到预想的效果。</li>
</ul>
<h2 id="后话">后话</h2>
<p>话说小明看到这个后很恼怒（居然选了个白痴），你能帮助小明改进他的选拔方案吗？（小明炒股赢了后不会忘记你的）</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="引入问题">引入问题</h2>
<p>在书上看到一个有意思的问题，不知从何说起，举个栗子，话说临近期末，小明闲来无事，想起了炒股，但他对股市知之甚少，于是他打算请个专家来指导他，为了确保专家质量，他决定对50个“专家”进行考核，选取表现最好的，考核方式如下：让专家]]>
    </summary>
    
      <category term="probability" scheme="http://lijian.ml/tags/probability/"/>
    
      <category term="math" scheme="http://lijian.ml/tags/math/"/>
    
      <category term="学习笔记" scheme="http://lijian.ml/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[往者不可谏，来者犹可追]]></title>
    <link href="http://lijian.ml/2014/01/01/summary2013/"/>
    <id>http://lijian.ml/2014/01/01/summary2013/</id>
    <published>2013-12-31T16:00:00.000Z</published>
    <updated>2014-11-07T03:32:57.000Z</updated>
    <content type="html"><![CDATA[<p>感冒了，看了一上午电影，睡了一下午，眼看2014年的第一天就要这样宅过去了，但似乎又没有更好的安排，好吧，宅就宅吧，但好歹做点比睡觉更有意义的事情吧，于是写点东西吧。</p>
<p>回首过去的一年，值得记录的各种大事、小事也不多，对我来说称得上大事的可能就是考研、毕业、研究生入学吧。关于考研，印象最深的莫过于选择考中科院的勇气以及准备初试的那段时光了，我的勇气说出来可能有点可笑，“给自己一个创造奇迹的机会”，想起这些，至今仍能感动自我。至于毕业，印象最深的就是拍毕业照和吃散伙饭，遗憾的是没有毕业旅行，写到这里，脑海里隐约浮现出各种无节操的毕业照以及散伙饭时班里几个女生哭成一团的场景。关于研究生入学，其重要性不言而喻，开启了学习生涯新篇章，但由于第一学期集中授课，所以给我的感觉好像是在上大五。其余的各种小事，就重点记录各种人生第一次吧：首先是来北京复试，那次经历创造了多项记录，第一次来北京、第一次坐10+小时的火车、第一次坐卧铺、第一次坐地铁、第一次一个人住宾馆、第一次一个人离家这么远、第一次真正的面试……，这些经历对一些人来说可能微不足道，但对我这样一个大学期间回家不用坐火车的人来说还是值得记录的。然后就是研究生入学以来产生的第一次，比如第一次坐长达6小时的高铁、第一次吃咸的豆腐脑、第一次住单人宿舍、第一次领工资、第一次去长城、第一次坐缆车、第一次滑雪、第一次享用暖气、还有第一次苦逼的抢票……，当时可能没注意，现在回想起来居然有这么多第一次，突然感觉2013没白活。</p>
<p>过去回首完了，该展望未来了。</p>
<p>提到新年计划，说实在的还真没想好，我一向信奉“车到山前必有路，桥到船头自然直”和“人生从来就不是规划出来的，而是一步步走出来的”之类的话，所以一直懒于计划，虽说如此，但还是得有一个大体的方向，方向对了，就不会错得太离谱。下面就列举一些所谓的目标吧：首先，要多读书，这个听起来就不那么靠谱，说实话，之前还真没养成读书这个习惯，都是心血来潮读一读，所以不好给个具体的量化指标，只是希望能养成读书的习惯。其次，学会思考，学会表达，我一直坚信学到的东西只有经过思考才能有更深刻的理解，只有表达出来才能成为自己的东西。然后，要处理好学与思的关系，借用孔子的话来说，“学而不思则罔，思而不学则殆”，我的理解是，学习新知识时要多思考，否则会对学到的东西感到迷惘；遇到问题时不要光思考，可能还要与他人沟通，学习一些解决问题的知识和方法，否则就可能陷于闭门造车的困境。最后，要时刻保持激情，对学习的激情，对生活的激情，只有这样才能保持前行的动力。缺乏激情时不妨想想最可怕的事情吧（比你优秀的人比你更努力）。</p>
<p>最后，我想说的是：2013，去你；2014，走你！</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>感冒了，看了一上午电影，睡了一下午，眼看2014年的第一天就要这样宅过去了，但似乎又没有更好的安排，好吧，宅就宅吧，但好歹做点比睡觉更有意义的事情吧，于是写点东西吧。</p>
<p>回首过去的一年，值得记录的各种大事、小事也不多，对我来说称得上大事的可能就是考研、毕业、研究]]>
    </summary>
    
      <category term="summary" scheme="http://lijian.ml/tags/summary/"/>
    
      <category term="生活点滴" scheme="http://lijian.ml/categories/%E7%94%9F%E6%B4%BB%E7%82%B9%E6%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[离散余弦变换(DCT)与离散傅里叶变换(DFT)的关系]]></title>
    <link href="http://lijian.ml/2013/11/03/DCT/"/>
    <id>http://lijian.ml/2013/11/03/DCT/</id>
    <published>2013-11-02T16:00:00.000Z</published>
    <updated>2014-10-31T14:37:50.000Z</updated>
    <content type="html"><![CDATA[<h2 id="理解DCT与DFT之间关系的关键几点">理解DCT与DFT之间关系的关键几点</h2>
<ul>
<li>偶函数的DFT结果只包含余弦项；</li>
<li>对长度有限的数字信号，可以通过偶延拓和周期延拓，然后进行适当平移得到偶函数信号；</li>
<li>偶延拓时使用不同的边界处理方法将得到不同的离散余弦变换；通常按以下方法处理边界：设原信号为{1 2 3 4}，通过偶延拓处理得到{1 2 3 4 4 3 2 1}，然后再进行周期延拓，x(n)=x(n-8)，此时我们发现x(-1)=x(7)=1，将信号右移0.5个单位就得到了偶函数信号。</li>
<li>偶函数的DFT是奇函数，F(n)=0，F(k)=F(2n-k)，因此，虽然DFT结果长度为2n，然而仅需保存前n个即可，这n个数也即DCT变换结果(相差一个常量因子)。</li>
</ul>
<h2 id="实验结果：">实验结果：</h2>
<p>{1 2 3 4}DCT结果为：</p>
<p>{10.000    -3.154    0.000    -0.224}</p>
<p>{1 2 3 4 4 3 2 1}先DFT再进行相位调整(时移0.5)的结果为：</p>
<p>{10.000    -6.309    0.000    -0.448    0.000    0.448    0.000    6.309}</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="理解DCT与DFT之间关系的关键几点">理解DCT与DFT之间关系的关键几点</h2>
<ul>
<li>偶函数的DFT结果只包含余弦项；</li>
<li>对长度有限的数字信号，可以通过偶延拓和周期延拓，然后进行适当平移得到偶函数信号；</li>
<li>偶延拓]]>
    </summary>
    
      <category term="DCT" scheme="http://lijian.ml/tags/DCT/"/>
    
      <category term="DFT" scheme="http://lijian.ml/tags/DFT/"/>
    
      <category term="学习笔记" scheme="http://lijian.ml/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[多项式乘法与离散傅里叶变换（DFT）的关系]]></title>
    <link href="http://lijian.ml/2013/10/21/polyDFT/"/>
    <id>http://lijian.ml/2013/10/21/polyDFT/</id>
    <published>2013-10-20T16:00:00.000Z</published>
    <updated>2014-11-22T12:32:28.000Z</updated>
    <content type="html"><![CDATA[<p>离散傅里叶变换是数字信号处理中的重要内容，然而但从公式出发很难获得比较直观的理解。在工程上，我们一般将其理解为，一个长度有限的数字信号可以分解为有限个离散三角函数信号，这样一来DFT的物理意义和相关性质就比较清晰，对DFT的一些性质我们无需从公式出发进行数学推导，可以根据物理意义来理解。比如数字信号在时域的平移可以看成是有限个三角函数信号的平移，而三角函数信号的平移其时就是相位变化，对应的就是是频域的相移。其他一些时域的伸缩变换与频域的伸缩变换也是类似的。但是对于卷积与乘积的关系，确实不好理解（可以看成是数字系统的响应，但还是有点抽象）。今天看完算法导论多项式相关内容，感觉对DFT有了更深的理解，特别是卷积与乘积的关系。</p>
<p>大学期间学Z变换的时候，我就发现Z变换的结果其实就是(1/z)的多项式，多项式的系数可以对应离散的数字信号。我们考虑2个多项式的乘法，<span>$\left(1+x\right) \cdot \left(1+2x\right)=1+3x+2x^2$</span>，通过计算不难发现2点，第一，结果仍是多项式(废话)；第二，结果系数(1, 3, 2)就是原多项式系数(1, 1)和(1, 2)的卷积，这看似巧合，其实正是频域乘积和时域卷积的对应关系。理解完这个后，再来看离散傅里叶变换，你可能想当然的认为差不多，其实差远了。Z变换的结果是多项式，而DFT的结果仍是一个数字序列(一般是复数)，这跟多项式貌似没啥关系呀！其实还是有关系的(没关系我还说个鸟)。对于多项式，我们有2种表示方法，一是系数表示法，二是点值表示法。系数表示法想必大家都清楚，至于点值表示法，具体来讲，就是2个不同点可以确定一条直线(一次多项式)，3点不同点可以确定一条抛物线(二次多项式)，以此类推，我们只需要n+1个不同的点就能唯一确定一个n次多项式(姑且叫多项式采样定理吧)。从信号的角度来理解的话，结论就是，只需n+1个不同采样点就能完全恢复n次多项式信号(是不是很神奇)。DFT的结果其实就能看成一个多项式的点值表示。只是采样点比较奇葩，全是复数，N点DFT的采样点正是方程 <span>$x^N = 1$</span>的N个复数解(复平面中圆心位于原点的单位圆上均匀分布的N条半径)。</p>
<p>如果知道了2个多项式A和B的点值表达，我们能不能求得多项式C=A<em>B的点值表达呢？首先，我们得保证A和B的点值表达是基于相同的采样点，这样 一来对应采样点处的值相乘就能得到C在该点处的值；其次，我们得保证采样点的数目足够多，设A为n次多项式，B为m次多项式，则C=A</em>B为n+m-1次多项式，根据“多项式采样定理”，我们至少需要n+m个采样点。综上所述，如果我们知道A和B在(n+m)个不同时刻的采样值(A和B的采用时间要同步)，那么就能得到C的点值表达。</p>
<p>之前提到，对应一个长为N的离散数字信号，若视其为N-1次多项式的系数，则其DFT就是该多项式的N点表达。我们要是想得到该多项式的L(L &gt; N)点表达呢？不难想到把该信号用0补成长为L的信号，补长后的信号可以看成是L-1次多项式的系数，高次项为0而已。补长后再进行DFT就能得到多项式的L点表达。</p>
<p>现在有2个长度分别为n和m的离散数字信号，该如何通过DFT来计算其卷积呢？首先，2个多项式的系数卷积=多项式乘积的系数；其次，多项式系数DFT=多项式点值表达；再次，只要知道2个多项式的(n+m-1)点表达，就能求得其乘积多项式的点值表达。综上所述，卷积计算方法如下：首先，将2个信号用0补成长度为n+m-1(Why?)；其次，分别计算DFT，得到多项式的点值表达；再次，计算DFT的乘积，得到乘积多项式的点值表达；最后，计算IDFT(逆变换)，得到乘积多项式的系数，也就是原多项式系数的卷积，也即原信号的线性卷积。</p>
<p>注意到我们在利用DFT计算2个信号的卷积时要先把信号进行加0补长为2个信号长度之和，要是不加长或者补0后长度仍不够会出现什么情况？具体分析如下：设原信号长度分别为n和m，补0处理后的长度为N，<span>$max(n, m) \leq N < n+m-1$</span>，此时进行DFT可得到多项式的N点表达，再做乘法可得乘积多项式的N个采样值，由于<span>$N< n+m-1$</span>，根据“多项式采样定理”知无法恢复<span>$n+m-1$</span>次多项式，我们进行IDFT后得到的只是一个N-1次多项式的系数，并不是乘积多项式系数的卷积，但二者之间并非毫无关联。我们知道DFT是多项式的采样值，而且采样点是方程 x^N = 1 的解，这样一来就有，<span>$x^\left(N+k\right) = x^k$</span>，对于一个高于N-1次的多项式而言，就可以将其高于N-1次的项替换成低次项，并且保证替换后的多项式在采样点处的值不变。替换操作在系数上的变化表现为，高次项的系数被累加到低次项。举个例子，L次多项式系数为[1, 1, 1, 1, 1]，若N=3，则替换后的多项式系数为[2, 2, 1]。</p>
<p>其实，N点DFT的乘积对应时域信号的N点循环卷积。2个长分别为n和m的信号做N点循环卷积，其结果的DFT等于原信号N点DFT的乘积，当且仅当<span>$N >= n+m-1$</span>时，循环卷积与线性卷积(通常意义下2个离散信号的卷积)才相等。正因如此，我们可以利用DFT来计算线性卷积，而DFT存在快速算法（FFT），从而大大降低线性卷积的复杂度。</p>
<p>终于完了，写得有些混乱了，也不知道讲清楚没。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>离散傅里叶变换是数字信号处理中的重要内容，然而但从公式出发很难获得比较直观的理解。在工程上，我们一般将其理解为，一个长度有限的数字信号可以分解为有限个离散三角函数信号，这样一来DFT的物理意义和相关性质就比较清晰，对DFT的一些性质我们无需从公式出发进行数学推导，可以根据物]]>
    </summary>
    
      <category term="DIP" scheme="http://lijian.ml/tags/DIP/"/>
    
      <category term="DFT" scheme="http://lijian.ml/tags/DFT/"/>
    
      <category term="学习笔记" scheme="http://lijian.ml/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[对相关性的理解]]></title>
    <link href="http://lijian.ml/2013/10/14/correlation/"/>
    <id>http://lijian.ml/2013/10/14/correlation/</id>
    <published>2013-10-13T16:00:00.000Z</published>
    <updated>2014-11-05T12:47:34.000Z</updated>
    <content type="html"><![CDATA[<h2 id="何为相关性">何为相关性</h2>
<p>“相关性”这个词，在数据分析中很常见，数据之间的相关性对应的是事物之间的联系。比如说，人群身高数据和体重数据之间的相关性反映的是身高与体重之间的联系。说到相关性，就不得不提到因果关系，事物之间的因果关系是一种特殊的联系，而相关性则更为普遍。因果关系是一种确定的关系，而相关性是一种非确定的关系，只是统计上的结论。</p>
<h2 id="为何要进行相关性分析？">为何要进行相关性分析？</h2>
<p>根据马克思主义的观点，事物之间的联系是普遍的，科学研究的主要目的就是发现事物之间的联系，进而达到认识世界、改造世界的目的。是不是有点徦？但确实是这样的。举个今天上课老师讲到的例子，在数据挖掘等相关研究中，往往需要从海量数据中发现某种规律，从而提取有用信息。在这个过程中，由于数据太多、太杂、可能有冗余或者错误，所以在data mining之前必须要进行前期处理，否则就是”garbage in, garbage out”，而且数据量太大还会大大延长算法执行时间。在进行数据前期处理时，就可以对数据进行相关性分析，如果2组数据的相关性很高，就说明存在信息冗余，也许只要其中一组就行，按照这个思想，我们就能剔除很多重复的或者相似的数据，从而加速程序的执行。这个例子说明了相关性分析在处理海量数据中的一些应用。</p>
<h2 id="如何进行相关性分析？">如何进行相关性分析？</h2>
<p>相关性分析本质上是对事物之间的联系进行定量分析。统计学上的相关系数就是对2个变量之间相关性的度量。线性相关系数定义为：<span>$r = \frac{\sum_{i}^{n}(x_i-\bar{x})(y_i-\bar{y})}{\sqrt{\sum_{i}^{n}(x_i-\bar{x})^2\cdot\sum_{i}^{n}(y_i-\bar{y})^2}}$</span>，咋一看，这公式挺复杂的，其实挺直观的，相关系数<span>$r$</span>就是向量<span>$\vec{x}$</span>和<span>$\vec{y}$</span>去掉直流分量后的夹角余弦。</p>
<ul>
<li>当<span>$r=0$</span>时，相关性为0，2个变量对应的向量相互垂直，一组数据是另一组数据的正数倍；</li>
<li>当<span>$r=1$</span>时，正相关性最大，2个变量对应的向量正向平行，一组数据是另一组数据的负数倍；</li>
<li>当<span>$r=-1$</span>时，负相关性最大，2个变量对应的向量反向平行，2组数据线性无关。</li>
</ul>
<p>仔细想想，这样定义也是蛮有道理的。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="何为相关性">何为相关性</h2>
<p>“相关性”这个词，在数据分析中很常见，数据之间的相关性对应的是事物之间的联系。比如说，人群身高数据和体重数据之间的相关性反映的是身高与体重之间的联系。说到相关性，就不得不提到因果关系，事物之间的因果关系是一种特殊的联系，而]]>
    </summary>
    
      <category term="similarity" scheme="http://lijian.ml/tags/similarity/"/>
    
      <category term="correlation" scheme="http://lijian.ml/tags/correlation/"/>
    
      <category term="math" scheme="http://lijian.ml/tags/math/"/>
    
      <category term="学习笔记" scheme="http://lijian.ml/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
</feed>
